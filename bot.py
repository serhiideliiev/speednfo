#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
–û—Å–Ω–æ–≤–Ω–∏–π –º–æ–¥—É–ª—å Telegram –±–æ—Ç–∞ –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É URL –∑ Google PageSpeed Insights
"""

import logging
import json
from datetime import datetime

from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import (
    Application, CommandHandler, MessageHandler, CallbackQueryHandler,
    filters, ContextTypes
)

from config import TOKEN, BOT_MESSAGES, logger
from pagespeed_analyzer import PageSpeedAnalyzer
from pdf_generator import PDFReportGenerator
from utils import is_valid_url, generate_filename


class PageSpeedBot:
    """
    –ö–ª–∞—Å –¥–ª—è –æ–±—Ä–æ–±–∫–∏ –≤–∑–∞—î–º–æ–¥—ñ–π –∑ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º —á–µ—Ä–µ–∑ Telegram.
    """
    
    def __init__(self, token=None):
        """
        –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î Telegram –±–æ—Ç–∞.
        
        Args:
            token (str, optional): Telegram Bot API —Ç–æ–∫–µ–Ω.
                                  –ó–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è –∑ config.py
        """
        self.token = token or TOKEN
        self.analyzer = PageSpeedAnalyzer()
        self.pdf_generator = PDFReportGenerator()
    
    def run(self):
        """–ó–∞–ø—É—Å–∫–∞—î –±–æ—Ç–∞."""
        # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –¥–æ–¥–∞—Ç–∫—É
        application = Application.builder().token(self.token).build()

        # –î–æ–¥–∞–≤–∞–Ω–Ω—è –æ–±—Ä–æ–±–Ω–∏–∫—ñ–≤ –∫–æ–º–∞–Ω–¥
        application.add_handler(CommandHandler("start", self.start))
        application.add_handler(CommandHandler("help", self.help_command))
        application.add_handler(CommandHandler("about", self.about_command))
        application.add_handler(CommandHandler("full", self.full_analysis))
        
        # –î–æ–¥–∞–≤–∞–Ω–Ω—è –æ–±—Ä–æ–±–Ω–∏–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
        application.add_handler(
            MessageHandler(filters.TEXT & ~filters.COMMAND, self.analyze_url)
        )
        
        # –î–æ–¥–∞–≤–∞–Ω–Ω—è –æ–±—Ä–æ–±–Ω–∏–∫–∞ –∫–Ω–æ–ø–æ–∫
        application.add_handler(CallbackQueryHandler(self.button_callback))
        
        # –î–æ–¥–∞–≤–∞–Ω–Ω—è –æ–±—Ä–æ–±–Ω–∏–∫–∞ –ø–æ–º–∏–ª–æ–∫
        application.add_error_handler(self.error_handler)

        # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
        logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ")
        application.run_polling()
    
    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /start."""
        user = update.effective_user
        message = BOT_MESSAGES["start"].format(user_name=user.first_name)
        await update.message.reply_text(message)
    
    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /help."""
        await update.message.reply_text(BOT_MESSAGES["help"], parse_mode="Markdown")
    
    async def about_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /about."""
        await update.message.reply_text(BOT_MESSAGES["about"], parse_mode="Markdown")
    
    async def analyze_url(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–æ–±–Ω–∏–∫ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –∑ URL."""
        url = update.message.text.strip()
        logger.debug(f"Received URL for analysis: {url}")
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—ñ URL
        if not is_valid_url(url):
            await update.message.reply_text(BOT_MESSAGES["invalid_url"])
            return
        
        # –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø–æ—á–∞—Ç–æ–∫ –∞–Ω–∞–ª—ñ–∑—É
        status_message = await update.message.reply_text(BOT_MESSAGES["analysis_start"])
        
        try:
            logger.debug("Starting mobile analysis...")
            # –ê–Ω–∞–ª—ñ–∑ –¥–ª—è –º–æ–±—ñ–ª—å–Ω–æ—ó –≤–µ—Ä—Å—ñ—ó
            mobile_results = self.analyzer.analyze(url, "mobile")
            logger.debug(f"Mobile analysis results: {mobile_results}")
            if "error" in mobile_results:
                await status_message.edit_text(
                    BOT_MESSAGES["error"].format(error=mobile_results["error"])
                )
                return
                
            logger.debug("Starting desktop analysis...")
            # –ê–Ω–∞–ª—ñ–∑ –¥–ª—è –¥–µ—Å–∫—Ç–æ–ø–Ω–æ—ó –≤–µ—Ä—Å—ñ—ó
            desktop_results = self.analyzer.analyze(url, "desktop")
            logger.debug(f"Desktop analysis results: {desktop_results}")
            if "error" in desktop_results:
                await status_message.edit_text(
                    BOT_MESSAGES["error"].format(error=desktop_results["error"])
                )
                return
                
            # –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É
            await status_message.edit_text(BOT_MESSAGES["analysis_complete"])
            
            logger.debug("Generating PDF report...")
            # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è PDF –∑—ñ –∑–≤—ñ—Ç–æ–º
            pdf_bytes = self.pdf_generator.generate_report(url, mobile_results, desktop_results)
            logger.debug(f"PDF generated, size: {pdf_bytes.getbuffer().nbytes} bytes")
            pdf_bytes.seek(0)
            
            # –ü—ñ–¥–≥–æ—Ç–æ–≤–∫–∞ –Ω–∞–∑–≤–∏ —Ñ–∞–π–ª—É
            filename = generate_filename(url)
            logger.debug(f"Sending PDF to user with filename: {filename}")
            
            # –í—ñ–¥–ø—Ä–∞–≤–∫–∞ PDF —Ñ–∞–π–ª—É
            await update.message.reply_document(
                document=pdf_bytes,
                filename=filename,
                caption=BOT_MESSAGES["report_caption"].format(
                    url=url,
                    mobile_score=mobile_results['score'],
                    desktop_score=desktop_results['score']
                )
            )
            logger.debug("PDF sent to user successfully.")
            
            # –í–∏–¥–∞–ª–µ–Ω–Ω—è —Å—Ç–∞—Ç—É—Å–Ω–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
            await status_message.delete()
            
            # –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –∫–Ω–æ–ø–æ–∫ –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª—ñ–∑—É
            keyboard = [
                [
                    InlineKeyboardButton("üì± –î–µ—Ç–∞–ª—å–Ω–∏–π –∞–Ω–∞–ª—ñ–∑ –¥–ª—è –º–æ–±—ñ–ª—å–Ω–∏—Ö", 
                                        callback_data=f"detail_mobile_{url}"),
                    InlineKeyboardButton("üñ•Ô∏è –î–µ—Ç–∞–ª—å–Ω–∏–π –∞–Ω–∞–ª—ñ–∑ –¥–ª—è –¥–µ—Å–∫—Ç–æ–ø—É", 
                                        callback_data=f"detail_desktop_{url}")
                ]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await update.message.reply_text(
                BOT_MESSAGES["detail_options"],
                reply_markup=reply_markup
            )
            
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª—ñ–∑—ñ URL: {e}", exc_info=True)
            await status_message.edit_text(
                BOT_MESSAGES["error"].format(error=str(e))
            )

    async def full_analysis(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–í–∏–∫–æ–Ω—É—î –ø–æ–≤–Ω–∏–π –∫–æ–º–ø–ª–µ–∫—Å–Ω–∏–π –∞–Ω–∞–ª—ñ–∑ URL."""
        args = context.args
        
        if not args:
            await update.message.reply_text(
                "–ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥–∞–π—Ç–µ URL –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É –ø—ñ—Å–ª—è –∫–æ–º–∞–Ω–¥–∏.\n"
                "–ù–∞–ø—Ä–∏–∫–ª–∞–¥: /full https://example.com"
            )
            return
        
        url = args[0]
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—ñ URL
        if not is_valid_url(url):
            await update.message.reply_text(BOT_MESSAGES["invalid_url"])
            return
        
        # –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø–æ—á–∞—Ç–æ–∫ –∞–Ω–∞–ª—ñ–∑—É
        status_message = await update.message.reply_text(
            "üîç –ü–æ—á–∏–Ω–∞—é –∫–æ–º–ø–ª–µ–∫—Å–Ω–∏–π –∞–Ω–∞–ª—ñ–∑ URL...\n"
            "–¶–µ –º–æ–∂–µ –∑–∞–π–Ω—è—Ç–∏ –∫—ñ–ª—å–∫–∞ —Ö–≤–∏–ª–∏–Ω. –ë—É–¥—å –ª–∞—Å–∫–∞, –∑–∞—á–µ–∫–∞–π—Ç–µ."
        )
        
        try:
            # –í–∏–∫–æ–Ω–∞–Ω–Ω—è –ø–æ–≤–Ω–æ–≥–æ –∞–Ω–∞–ª—ñ–∑—É
            results = self.analyzer.analyze_with_all_metrics(url)
            
            # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å –ø–æ–º–∏–ª–æ–∫
            if "error" in results:
                await status_message.edit_text(
                    BOT_MESSAGES["error"].format(error=results["error"])
                )
                return
            
            # –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É
            await status_message.edit_text("üìä –ö–æ–º–ø–ª–µ–∫—Å–Ω–∏–π –∞–Ω–∞–ª—ñ–∑ –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –ì–µ–Ω–µ—Ä—É—é PDF-–∑–≤—ñ—Ç...")
            
            # –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –æ—Ü—ñ–Ω–æ–∫
            mobile_score = results['pagespeed'].get('mobile', {}).get('score', 0)
            desktop_score = results['pagespeed'].get('desktop', {}).get('score', 0)
            
            # –°–ø—Ä–æ—â–µ–Ω—ñ –æ—Ü—ñ–Ω–∫–∏ –¥–ª—è SEO, –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—ñ —Ç–∞ –±–µ–∑–ø–µ–∫–∏
            seo_score = 100 if not results['seo'].get('recommendations') else 70
            accessibility_score = 100 if not results['accessibility'].get('recommendations') else 70
            security_score = 100 if not results['security'].get('recommendations') else 70
            
            # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è PDF –∑—ñ –∑–≤—ñ—Ç–æ–º
            # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —ñ—Å–Ω—É—é—á—É —Ñ—É–Ω–∫—Ü—ñ—é –¥–ª—è –ø—Ä–æ—Å—Ç–æ—Ç–∏, –∞–ª–µ –≤ —Ä–µ–∞–ª—å–Ω–æ–º—É –ø—Ä–æ–µ–∫—Ç—ñ 
            # –≤–∞—Ä—Ç–æ —Å—Ç–≤–æ—Ä–∏—Ç–∏ –æ–∫—Ä–µ–º—É —Ñ—É–Ω–∫—Ü—ñ—é –¥–ª—è –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ –∑–≤—ñ—Ç—É
            pdf_bytes = self.pdf_generator.generate_report(
                url, 
                results['pagespeed'].get('mobile', {}), 
                results['pagespeed'].get('desktop', {})
            )
            pdf_bytes.seek(0)
            
            # –ü—ñ–¥–≥–æ—Ç–æ–≤–∫–∞ –Ω–∞–∑–≤–∏ —Ñ–∞–π–ª—É –¥–ª—è –ø–æ–≤–Ω–æ–≥–æ –∞–Ω–∞–ª—ñ–∑—É
            filename = generate_filename(url, prefix="full_analysis")
            
            # –í—ñ–¥–ø—Ä–∞–≤–∫–∞ PDF —Ñ–∞–π–ª—É
            await update.message.reply_document(
                document=pdf_bytes,
                filename=filename,
                caption=BOT_MESSAGES["full_analysis_complete"].format(
                    url=url,
                    mobile_score=mobile_score,
                    desktop_score=desktop_score,
                    seo_score=seo_score,
                    accessibility_score=accessibility_score,
                    security_score=security_score
                )
            )
            
            # –í–∏–¥–∞–ª–µ–Ω–Ω—è —Å—Ç–∞—Ç—É—Å–Ω–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
            await status_message.delete()
            
            # –î–æ–¥–∞—Ç–∫–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—è–º–∏
            recommendations_msg = "üìå **–û—Å–Ω–æ–≤–Ω—ñ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó:**\n\n"
            
            # –î–æ–¥–∞—î–º–æ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó –∑ —Ä—ñ–∑–Ω–∏—Ö –∞–Ω–∞–ª—ñ–∑—ñ–≤
            if 'recommendations' in results['pagespeed'].get('mobile', {}):
                mobile_recs = results['pagespeed']['mobile']['recommendations'][:3]  # –û–±–º–µ–∂—É—î–º–æ –¥–æ 3
                if mobile_recs:
                    recommendations_msg += "üì± **–ú–æ–±—ñ–ª—å–Ω–∞ –≤–µ—Ä—Å—ñ—è:**\n"
                    for rec in mobile_recs:
                        recommendations_msg += f"‚Ä¢ {rec}\n"
                    recommendations_msg += "\n"
            
            if 'recommendations' in results.get('seo', {}):
                seo_recs = results['seo']['recommendations'][:3]  # –û–±–º–µ–∂—É—î–º–æ –¥–æ 3
                if seo_recs:
                    recommendations_msg += "üîç **SEO:**\n"
                    for rec in seo_recs:
                        recommendations_msg += f"‚Ä¢ {rec}\n"
                    recommendations_msg += "\n"
            
            if 'recommendations' in results.get('security', {}):
                security_recs = results['security']['recommendations'][:3]  # –û–±–º–µ–∂—É—î–º–æ –¥–æ 3
                if security_recs:
                    recommendations_msg += "üîí **–ë–µ–∑–ø–µ–∫–∞:**\n"
                    for rec in security_recs:
                        recommendations_msg += f"‚Ä¢ {rec}\n"
            
            # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó
            await update.message.reply_text(recommendations_msg, parse_mode="Markdown")
            
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–º—É –∞–Ω–∞–ª—ñ–∑—ñ: {e}", exc_info=True)
            await status_message.edit_text(
                BOT_MESSAGES["error"].format(error=str(e))
            )
        
    async def button_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–æ–±–Ω–∏–∫ –Ω–∞—Ç–∏—Å–∫–∞–Ω—å –Ω–∞ –∫–Ω–æ–ø–∫–∏."""
        query = update.callback_query
        await query.answer()
        
        # –†–æ–∑–±—ñ—Ä –¥–∞–Ω–∏—Ö –∑ –∫–Ω–æ–ø–∫–∏
        callback_data = query.data
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç—É callback_data
        if not callback_data or "_" not in callback_data:
            await query.edit_message_text("‚ùå –ü–æ–º–∏–ª–∫–∞: –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–∏—Ö –∫–Ω–æ–ø–∫–∏")
            return
            
        # –ë–µ–∑–ø–µ—á–Ω–∏–π –ø–∞—Ä—Å–∏–Ω–≥ callback_data
        parts = callback_data.split("_", 2)  # –†–æ–∑–¥—ñ–ª—è—î–º–æ —Ç—ñ–ª—å–∫–∏ –Ω–∞ –ø–µ—Ä—à—ñ 2 –ø—ñ–¥–∫—Ä–µ—Å–ª–µ–Ω–Ω—è
        if len(parts) < 3:
            await query.edit_message_text("‚ùå –ü–æ–º–∏–ª–∫–∞: –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–∏—Ö –∫–Ω–æ–ø–∫–∏")
            return
            
        action = parts[0]
        device = parts[1]
        url = parts[2]  # –í—Å–µ –ø—ñ—Å–ª—è –¥—Ä—É–≥–æ–≥–æ –ø—ñ–¥–∫—Ä–µ—Å–ª–µ–Ω–Ω—è –≤–≤–∞–∂–∞—î–º–æ URL
        
        if action == "detail":
            # –í–∞–ª—ñ–¥–∞—Ü—ñ—è –ø—Ä–∏—Å—Ç—Ä–æ—é
            if device not in ["mobile", "desktop"]:
                await query.edit_message_text("‚ùå –ü–æ–º–∏–ª–∫–∞: –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ç–∏–ø –ø—Ä–∏—Å—Ç—Ä–æ—é")
                return
                
            # –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø–æ—á–∞—Ç–æ–∫ –∞–Ω–∞–ª—ñ–∑—É
            await query.edit_message_text(f"üîç –û—Ç—Ä–∏–º—É—é –¥–µ—Ç–∞–ª—å–Ω–∏–π –∞–Ω–∞–ª—ñ–∑ –¥–ª—è {device}...")
            
            try:
                # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—ñ URL
                if not is_valid_url(url):
                    await query.edit_message_text(BOT_MESSAGES["invalid_url"])
                    return
                    
                # –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤ –∞–Ω–∞–ª—ñ–∑—É
                results = self.analyzer.analyze(url, device)
                if "error" in results:
                    await query.edit_message_text(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {results['error']}")
                    return
                    
                # –§–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∑–≤—ñ—Ç—É
                device_name = "–º–æ–±—ñ–ª—å–Ω–∏—Ö –ø—Ä–∏—Å—Ç—Ä–æ—ó–≤" if device == "mobile" else "–∫–æ–º–ø'—é—Ç–µ—Ä—ñ–≤"
                message = f"üìä *–î–µ—Ç–∞–ª—å–Ω–∏–π –∞–Ω–∞–ª—ñ–∑ –¥–ª—è {device_name}*\nURL: {url}\n\n"
                
                # –û—Å–Ω–æ–≤–Ω–∞ –æ—Ü—ñ–Ω–∫–∞
                message += f"*–ó–∞–≥–∞–ª—å–Ω–∞ –æ—Ü—ñ–Ω–∫–∞:* {results['score']}/100\n\n"
                
                # –û—Å–Ω–æ–≤–Ω—ñ –º–µ—Ç—Ä–∏–∫–∏
                message += "*–û—Å–Ω–æ–≤–Ω—ñ –º–µ—Ç—Ä–∏–∫–∏:*\n"
                for metric_name, metric_data in results['metrics'].items():
                    emoji = "‚úÖ" if metric_data['rating'] == "good" else "‚ö†Ô∏è" if metric_data['rating'] == "average" else "‚ùå"
                    message += f"{emoji} {metric_name}: {metric_data['value']} ({metric_data['rating']})\n"
                
                # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó
                if results['recommendations']:
                    message += "\n*–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó —â–æ–¥–æ –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—ó:*\n"
                    for rec in results['recommendations']:
                        message += f"‚Ä¢ {rec}\n"
                
                await query.edit_message_text(message, parse_mode="Markdown")
                
            except Exception as e:
                logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª—ñ–∑—É: {e}", exc_info=True)
                await query.edit_message_text(
                    BOT_MESSAGES["error"].format(error=str(e))
                )
        else:
            await query.edit_message_text("‚ùå –ù–µ–ø—ñ–¥—Ç—Ä–∏–º—É–≤–∞–Ω–∞ –¥—ñ—è")
    
    async def error_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–æ–±–Ω–∏–∫ –ø–æ–º–∏–ª–æ–∫."""
        logger.error(f"–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è: {context.error}", exc_info=True)
        
        # –°–ø—Ä–æ–±–∞ –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É –ø—Ä–æ –ø–æ–º–∏–ª–∫—É
        if update and update.effective_message:
            await update.effective_message.reply_text(
                "‚ùå –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –≤–∞—à–æ–≥–æ –∑–∞–ø–∏—Ç—É. "
                "–ë—É–¥—å –ª–∞—Å–∫–∞, —Å–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ –ø—ñ–∑–Ω—ñ—à–µ."
            )