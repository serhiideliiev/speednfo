#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
–û—Å–Ω–æ–≤–Ω–∏–π –º–æ–¥—É–ª—å Telegram –±–æ—Ç–∞ –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É URL –∑ Google PageSpeed Insights
"""

import logging
import json
from datetime import datetime, timedelta
import uuid

from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import (
    Application, CommandHandler, MessageHandler, CallbackQueryHandler,
    filters, ContextTypes, ConversationHandler
)
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.jobstores.memory import MemoryJobStore

from config import TOKEN, BOT_MESSAGES, logger
from pagespeed_analyzer import PageSpeedAnalyzer
from pdf_generator import PDFReportGenerator
from utils import is_valid_url, generate_filename

# Define states for ConversationHandler
ASK_URL, ASK_FREQUENCY = range(2)

class PageSpeedBot:
    """
    –ö–ª–∞—Å –¥–ª—è –æ–±—Ä–æ–±–∫–∏ –≤–∑–∞—î–º–æ–¥—ñ–π –∑ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º —á–µ—Ä–µ–∑ Telegram.
    """
    
    def __init__(self, token=None):
        """
        –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î Telegram –±–æ—Ç–∞.
        
        Args:
            token (str, optional): Telegram Bot API —Ç–æ–∫–µ–Ω.
                                  –ó–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è –∑ config.py
        """
        self.token = token or TOKEN
        self.analyzer = PageSpeedAnalyzer()
        self.pdf_generator = PDFReportGenerator()
        # Initialize scheduler
        self.scheduler = AsyncIOScheduler(jobstores={'default': MemoryJobStore()})
        # Dictionary to store job details {job_id: {'chat_id': ..., 'url': ..., 'frequency': ...}}
        self.scheduled_jobs = {} 
        self.application = None # To store the application instance
    
    async def scheduled_analysis_job(self, chat_id: int, url: str, application: Application):
        """
        –§—É–Ω–∫—Ü—ñ—è, —â–æ –≤–∏–∫–æ–Ω—É—î—Ç—å—Å—è –∑–∞ —Ä–æ–∑–∫–ª–∞–¥–æ–º –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É URL.
        –ù–∞–¥—Å–∏–ª–∞—î –∑–≤—ñ—Ç –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É.
        """
        logger.info(f"Running scheduled job for chat_id {chat_id}, url: {url}")
        try:
            # –ê–Ω–∞–ª—ñ–∑ –¥–ª—è –º–æ–±—ñ–ª—å–Ω–æ—ó —Ç–∞ –¥–µ—Å–∫—Ç–æ–ø–Ω–æ—ó –≤–µ—Ä—Å—ñ–π
            mobile_results = self.analyzer.analyze(url, "mobile")
            if "error" in mobile_results:
                await application.bot.send_message(chat_id, BOT_MESSAGES["scheduled_error"].format(url=url, error=mobile_results["error"]))
                return

            desktop_results = self.analyzer.analyze(url, "desktop")
            if "error" in desktop_results:
                await application.bot.send_message(chat_id, BOT_MESSAGES["scheduled_error"].format(url=url, error=desktop_results["error"]))
                return

            # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è PDF –∑—ñ –∑–≤—ñ—Ç–æ–º
            pdf_bytes = self.pdf_generator.generate_report(url, mobile_results, desktop_results)
            pdf_bytes.seek(0)
            filename = generate_filename(url, prefix="scheduled")

            # –í—ñ–¥–ø—Ä–∞–≤–∫–∞ PDF —Ñ–∞–π–ª—É
            await application.bot.send_document(
                chat_id=chat_id,
                document=pdf_bytes,
                filename=filename,
                caption=BOT_MESSAGES["report_caption"].format(
                    url=url,
                    mobile_score=mobile_results.get('score', 'N/A'),
                    desktop_score=desktop_results.get('score', 'N/A')
                ) + "\n\n_(–¶–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∏–π –∑–≤—ñ—Ç)_"
            )
            logger.info(f"Scheduled report sent for chat_id {chat_id}, url: {url}")

        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ —É –ø–ª–∞–Ω–æ–≤–æ–º—É –∑–∞–≤–¥–∞–Ω–Ω—ñ –¥–ª—è chat_id {chat_id}, url {url}: {e}", exc_info=True)
            try:
                await application.bot.send_message(chat_id, BOT_MESSAGES["scheduled_error"].format(url=url, error=str(e)))
            except Exception as send_error:
                logger.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É –ø–ª–∞–Ω–æ–≤–æ–≥–æ –∑–∞–≤–¥–∞–Ω–Ω—è –¥–ª—è chat_id {chat_id}: {send_error}")


    def run(self):
        """–ó–∞–ø—É—Å–∫–∞—î –±–æ—Ç–∞ —Ç–∞ –ø–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫."""
        # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –¥–æ–¥–∞—Ç–∫—É
        self.application = Application.builder().token(self.token).build() # Store application instance

        # –î–æ–¥–∞–≤–∞–Ω–Ω—è –æ–±—Ä–æ–±–Ω–∏–∫—ñ–≤ –∫–æ–º–∞–Ω–¥
        self.application.add_handler(CommandHandler("start", self.start))
        self.application.add_handler(CommandHandler("help", self.help_command))
        self.application.add_handler(CommandHandler("about", self.about_command))
        self.application.add_handler(CommandHandler("full", self.full_analysis))
        self.application.add_handler(CommandHandler("listschedules", self.list_schedules_command))

        # Conversation handler for scheduling
        conv_handler = ConversationHandler(
            entry_points=[CommandHandler("schedule", self.schedule_start)],
            states={
                ASK_URL: [MessageHandler(filters.TEXT & ~filters.COMMAND, self.schedule_ask_url)],
                ASK_FREQUENCY: [CallbackQueryHandler(self.schedule_set_frequency, pattern='^freq_')],
            },
            fallbacks=[CommandHandler("cancel", self.schedule_cancel)],
            conversation_timeout=300
        )
        self.application.add_handler(conv_handler)
        
        # –î–æ–¥–∞–≤–∞–Ω–Ω—è –æ–±—Ä–æ–±–Ω–∏–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å (–ø–æ–∑–∞ –¥—ñ–∞–ª–æ–≥–æ–º)
        self.application.add_handler(
            MessageHandler(filters.TEXT & ~filters.COMMAND, self.analyze_url)
        )
        
        # –î–æ–¥–∞–≤–∞–Ω–Ω—è –æ–±—Ä–æ–±–Ω–∏–∫–∞ –∫–Ω–æ–ø–æ–∫ (–¥–µ—Ç–∞–ª—ñ —Ç–∞ —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è —Ä–æ–∑–∫–ª–∞–¥—É)
        self.application.add_handler(CallbackQueryHandler(self.button_callback))
        
        # –î–æ–¥–∞–≤–∞–Ω–Ω—è –æ–±—Ä–æ–±–Ω–∏–∫–∞ –ø–æ–º–∏–ª–æ–∫
        self.application.add_error_handler(self.error_handler)

        # –ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫–∞
        self.scheduler.start()
        logger.info("–ü–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫ –∑–∞–ø—É—â–µ–Ω–æ")

        # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
        logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ")
        self.application.run_polling() # Use stored application instance

    # --- Scheduling Handlers ---

    async def schedule_start(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """–ü–æ—á–∏–Ω–∞—î –¥—ñ–∞–ª–æ–≥ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Ä–æ–∑–∫–ª–∞–¥—É."""
        await update.message.reply_text(BOT_MESSAGES["schedule_ask_url"])
        return ASK_URL

    async def schedule_ask_url(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """–û—Ç—Ä–∏–º—É—î URL —Ç–∞ –∑–∞–ø–∏—Ç—É—î —á–∞—Å—Ç–æ—Ç—É."""
        url = update.message.text.strip()
        if not is_valid_url(url):
            await update.message.reply_text(BOT_MESSAGES["invalid_url"] + "\n" + BOT_MESSAGES["schedule_ask_url_again"])
            return ASK_URL

        context.user_data['schedule_url'] = url
        
        keyboard = [
            [InlineKeyboardButton("üìÖ –©–æ—Ç–∏–∂–Ω—è", callback_data='freq_weekly')],
            [InlineKeyboardButton("üåô –©–æ–º—ñ—Å—è—Ü—è", callback_data='freq_monthly')],
            [InlineKeyboardButton("‚òÄÔ∏è –©–æ–¥–Ω—è", callback_data='freq_daily')],
            [InlineKeyboardButton("‚è∞ –©–æ–≥–æ–¥–∏–Ω–∏", callback_data='freq_hourly')],
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(BOT_MESSAGES["schedule_ask_frequency"], reply_markup=reply_markup)
        return ASK_FREQUENCY

    async def schedule_set_frequency(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """–í—Å—Ç–∞–Ω–æ–≤–ª—é—î —á–∞—Å—Ç–æ—Ç—É —Ç–∞ –¥–æ–¥–∞—î –∑–∞–≤–¥–∞–Ω–Ω—è –¥–æ –ø–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫–∞."""
        query = update.callback_query
        await query.answer()

        frequency = query.data.split('_')[1]
        url = context.user_data.get('schedule_url')
        chat_id = update.effective_chat.id

        if not url:
            await query.edit_message_text("‚ùå –ü–æ–º–∏–ª–∫–∞: URL –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –ë—É–¥—å –ª–∞—Å–∫–∞, –ø–æ—á–Ω—ñ—Ç—å –∑ /schedule –∑–Ω–æ–≤—É.")
            return ConversationHandler.END

        job_id = str(uuid.uuid4())

        trigger_args = {}
        freq_text = ""
        if frequency == 'weekly':
            trigger_args = {'week': 1, 'day_of_week': 'mon', 'hour': 9}
            freq_text = "—â–æ—Ç–∏–∂–Ω—è"
        elif frequency == 'monthly':
            trigger_args = {'day': 1, 'hour': 9}
            freq_text = "—â–æ–º—ñ—Å—è—Ü—è"
        elif frequency == 'daily':
            trigger_args = {'day': '*', 'hour': 9} # Run daily at 9 AM
            freq_text = "—â–æ–¥–Ω—è"
        elif frequency == 'hourly':
            trigger_args = {'hour': '*'} # Run every hour
            freq_text = "—â–æ–≥–æ–¥–∏–Ω–∏"
        else:
             await query.edit_message_text("‚ùå –ü–æ–º–∏–ª–∫–∞: –ù–µ–≤—ñ–¥–æ–º–∞ —á–∞—Å—Ç–æ—Ç–∞.")
             return ConversationHandler.END

        try:
            job = self.scheduler.add_job(
                self.scheduled_analysis_job,
                trigger='cron',
                args=[chat_id, url, self.application], # Pass application here
                id=job_id,
                name=f"Scheduled report for {chat_id} - {url}",
                replace_existing=True,
                misfire_grace_time=3600,
                **trigger_args
            )
            self.scheduled_jobs[job_id] = {'chat_id': chat_id, 'url': url, 'frequency': frequency}
            logger.info(f"Scheduled job added: {job_id} for chat {chat_id}, url {url}, freq {frequency}")
            
            await query.edit_message_text(
                BOT_MESSAGES["schedule_success"].format(url=url, frequency=freq_text)
            )
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –¥–æ–¥–∞–≤–∞–Ω–Ω—ñ –∑–∞–≤–¥–∞–Ω–Ω—è –¥–æ –ø–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫–∞: {e}", exc_info=True)
            await query.edit_message_text(BOT_MESSAGES["schedule_error"].format(error=str(e)))

        if 'schedule_url' in context.user_data:
            del context.user_data['schedule_url']
            
        return ConversationHandler.END

    async def schedule_cancel(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """–°–∫–∞—Å–æ–≤—É—î –ø—Ä–æ—Ü–µ—Å –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Ä–æ–∑–∫–ª–∞–¥—É."""
        if 'schedule_url' in context.user_data:
            del context.user_data['schedule_url']
        await update.message.reply_text(BOT_MESSAGES["schedule_cancelled"])
        return ConversationHandler.END

    async def list_schedules_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /listschedules."""
        chat_id = update.effective_chat.id
        user_jobs = {job_id: details for job_id, details in self.scheduled_jobs.items() if details['chat_id'] == chat_id}

        if not user_jobs:
            await update.message.reply_text(BOT_MESSAGES["list_schedule_no_jobs"])
            return

        message = BOT_MESSAGES["list_schedule_header"]
        keyboard = []
        for job_id, details in user_jobs.items():
            freq_map = {'weekly': '–©–æ—Ç–∏–∂–Ω—è', 'monthly': '–©–æ–º—ñ—Å—è—Ü—è', 'daily': '–©–æ–¥–Ω—è', 'hourly': '–©–æ–≥–æ–¥–∏–Ω–∏'}
            freq_text = freq_map.get(details['frequency'], details['frequency'])
            display_url = details['url'][:50] + '...' if len(details['url']) > 50 else details['url']
            message += f"‚Ä¢ `{display_url}` ({freq_text})\n"
            keyboard.append([InlineKeyboardButton(f"‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏ –¥–ª—è {display_url}", callback_data=f"cancel_job_{job_id}")])

        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text(message, reply_markup=reply_markup, parse_mode="Markdown")

    # --- End Scheduling Handlers ---

    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /start."""
        user = update.effective_user
        message = BOT_MESSAGES["start"].format(user_name=user.first_name)
        await update.message.reply_text(message)
    
    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /help."""
        help_text = BOT_MESSAGES["help"] + \
                    "\n*–ü–ª–∞–Ω—É–≤–∞–Ω–Ω—è –∑–≤—ñ—Ç—ñ–≤:*\n" \
                    "/schedule - –ù–∞–ª–∞—à—Ç—É–≤–∞—Ç–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∏–π –∑–≤—ñ—Ç\n" \
                    "/listschedules - –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –≤–∞—à—ñ –∑–∞–ø–ª–∞–Ω–æ–≤–∞–Ω—ñ –∑–≤—ñ—Ç–∏\n"
        await update.message.reply_text(help_text, parse_mode="Markdown")

    async def about_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /about."""
        await update.message.reply_text(BOT_MESSAGES["about"])
    
    async def analyze_url(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–æ–±–Ω–∏–∫ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –∑ URL."""
        url = update.message.text.strip()
        logger.debug(f"Received URL for analysis: {url}")
        
        if not is_valid_url(url):
            await update.message.reply_text(BOT_MESSAGES["invalid_url"])
            return
        
        status_message = await update.message.reply_text(BOT_MESSAGES["analysis_start"])
        
        try:
            logger.debug("Starting mobile analysis...")
            mobile_results = self.analyzer.analyze(url, "mobile")
            logger.debug(f"Mobile analysis results: {mobile_results}")
            if "error" in mobile_results:
                await status_message.edit_text(
                    BOT_MESSAGES["error"].format(error=mobile_results["error"])
                )
                return
                
            logger.debug("Starting desktop analysis...")
            desktop_results = self.analyzer.analyze(url, "desktop")
            logger.debug(f"Desktop analysis results: {desktop_results}")
            if "error" in desktop_results:
                await status_message.edit_text(
                    BOT_MESSAGES["error"].format(error=desktop_results["error"])
                )
                return
                
            await status_message.edit_text(BOT_MESSAGES["analysis_complete"])
            
            logger.debug("Generating PDF report...")
            pdf_bytes = self.pdf_generator.generate_report(url, mobile_results, desktop_results)
            logger.debug(f"PDF generated, size: {pdf_bytes.getbuffer().nbytes} bytes")
            pdf_bytes.seek(0)
            
            filename = generate_filename(url)
            logger.debug(f"Sending PDF to user with filename: {filename}")
            
            await update.message.reply_document(
                document=pdf_bytes,
                filename=filename,
                caption=BOT_MESSAGES["report_caption"].format(
                    url=url,
                    mobile_score=mobile_results['score'],
                    desktop_score=desktop_results['score']
                )
            )
            logger.debug("PDF sent to user successfully.")
            
            await status_message.delete()
            
            keyboard = [
                [
                    InlineKeyboardButton("üì± –î–µ—Ç–∞–ª—å–Ω–∏–π –∞–Ω–∞–ª—ñ–∑ –¥–ª—è –º–æ–±—ñ–ª—å–Ω–∏—Ö", 
                                        callback_data=f"detail_mobile_{url}"),
                    InlineKeyboardButton("üñ•Ô∏è –î–µ—Ç–∞–ª—å–Ω–∏–π –∞–Ω–∞–ª—ñ–∑ –¥–ª—è –¥–µ—Å–∫—Ç–æ–ø—É", 
                                        callback_data=f"detail_desktop_{url}")
                ]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await update.message.reply_text(
                BOT_MESSAGES["detail_options"],
                reply_markup=reply_markup
            )
            
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª—ñ–∑—ñ URL: {e}", exc_info=True)
            await status_message.edit_text(
                BOT_MESSAGES["error"].format(error=str(e))
            )

    async def full_analysis(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–í–∏–∫–æ–Ω—É—î –ø–æ–≤–Ω–∏–π –∫–æ–º–ø–ª–µ–∫—Å–Ω–∏–π –∞–Ω–∞–ª—ñ–∑ URL."""
        args = context.args
        
        if not args:
            await update.message.reply_text(
                "–ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥–∞–π—Ç–µ URL –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É –ø—ñ—Å–ª—è –∫–æ–º–∞–Ω–¥–∏.\n"
                "–ù–∞–ø—Ä–∏–∫–ª–∞–¥: /full https://example.com"
            )
            return
        
        url = args[0]
        
        if not is_valid_url(url):
            await update.message.reply_text(BOT_MESSAGES["invalid_url"])
            return
        
        status_message = await update.message.reply_text(
            "üîç –ü–æ—á–∏–Ω–∞—é –∫–æ–º–ø–ª–µ–∫—Å–Ω–∏–π –∞–Ω–∞–ª—ñ–∑ URL...\n"
            "–¶–µ –º–æ–∂–µ –∑–∞–π–Ω—è—Ç–∏ –∫—ñ–ª—å–∫–∞ —Ö–≤–∏–ª–∏–Ω. –ë—É–¥—å –ª–∞—Å–∫–∞, –∑–∞—á–µ–∫–∞–π—Ç–µ."
        )
        
        try:
            results = self.analyzer.analyze_with_all_metrics(url)
            
            if "error" in results:
                await status_message.edit_text(
                    BOT_MESSAGES["error"].format(error=results["error"])
                )
                return
            
            await status_message.edit_text("üìä –ö–æ–º–ø–ª–µ–∫—Å–Ω–∏–π –∞–Ω–∞–ª—ñ–∑ –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –ì–µ–Ω–µ—Ä—É—é PDF-–∑–≤—ñ—Ç...")
            
            mobile_score = results['pagespeed'].get('mobile', {}).get('score', 0)
            desktop_score = results['pagespeed'].get('desktop', {}).get('score', 0)
            
            seo_score = 100 if not results['seo'].get('recommendations') else 70
            accessibility_score = 100 if not results['accessibility'].get('recommendations') else 70
            security_score = 100 if not results['security'].get('recommendations') else 70
            
            pdf_bytes = self.pdf_generator.generate_report(
                url, 
                results['pagespeed'].get('mobile', {}), 
                results['pagespeed'].get('desktop', {})
            )
            pdf_bytes.seek(0)
            
            filename = generate_filename(url, prefix="full_analysis")
            
            await update.message.reply_document(
                document=pdf_bytes,
                filename=filename,
                caption=BOT_MESSAGES["full_analysis_complete"].format(
                    url=url,
                    mobile_score=mobile_score,
                    desktop_score=desktop_score,
                    seo_score=seo_score,
                    accessibility_score=accessibility_score,
                    security_score=security_score
                )
            )
            
            await status_message.delete()
            
            recommendations_msg = "üìå **–û—Å–Ω–æ–≤–Ω—ñ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó:**\n\n"
            
            if 'recommendations' in results['pagespeed'].get('mobile', {}):
                mobile_recs = results['pagespeed']['mobile']['recommendations'][:3]
                if mobile_recs:
                    recommendations_msg += "üì± **–ú–æ–±—ñ–ª—å–Ω–∞ –≤–µ—Ä—Å—ñ—è:**\n"
                    for rec in mobile_recs:
                        recommendations_msg += f"‚Ä¢ {rec}\n"
                    recommendations_msg += "\n"
            
            if 'recommendations' in results.get('seo', {}):
                seo_recs = results['seo']['recommendations'][:3]
                if seo_recs:
                    recommendations_msg += "üîç **SEO:**\n"
                    for rec in seo_recs:
                        recommendations_msg += f"‚Ä¢ {rec}\n"
                    recommendations_msg += "\n"
            
            if 'recommendations' in results.get('security', {}):
                security_recs = results['security']['recommendations'][:3]
                if security_recs:
                    recommendations_msg += "üîí **–ë–µ–∑–ø–µ–∫–∞:**\n"
                    for rec in security_recs:
                        recommendations_msg += f"‚Ä¢ {rec}\n"
            
            await update.message.reply_text(recommendations_msg, parse_mode="Markdown")
            
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–º—É –∞–Ω–∞–ª—ñ–∑—ñ: {e}", exc_info=True)
            await status_message.edit_text(
                BOT_MESSAGES["error"].format(error=str(e))
            )
        
    async def button_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–æ–±–Ω–∏–∫ –Ω–∞—Ç–∏—Å–∫–∞–Ω—å –Ω–∞ –∫–Ω–æ–ø–∫–∏ (–¥–µ—Ç–∞–ª—ñ —Ç–∞ —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è —Ä–æ–∑–∫–ª–∞–¥—É)."""
        query = update.callback_query
        await query.answer()
        
        callback_data = query.data
        
        if not callback_data or "_" not in callback_data:
            await query.edit_message_text("‚ùå –ü–æ–º–∏–ª–∫–∞: –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–∏—Ö –∫–Ω–æ–ø–∫–∏")
            return

        action_parts = callback_data.split("_", 2)
        action_prefix = action_parts[0]

        if action_prefix == "detail":
            if len(action_parts) < 3:
                await query.edit_message_text("‚ùå –ü–æ–º–∏–ª–∫–∞: –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–∏—Ö –∫–Ω–æ–ø–∫–∏ –¥–µ—Ç–∞–ª–µ–π")
                return
            
            device = action_parts[1]
            url = action_parts[2]
            
            if device not in ["mobile", "desktop"]:
                await query.edit_message_text("‚ùå –ü–æ–º–∏–ª–∫–∞: –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ç–∏–ø –ø—Ä–∏—Å—Ç—Ä–æ—é")
                return
                
            await query.edit_message_text(f"üîç –û—Ç—Ä–∏–º—É—é –¥–µ—Ç–∞–ª—å–Ω–∏–π –∞–Ω–∞–ª—ñ–∑ –¥–ª—è {device}...")
            
            try:
                if not is_valid_url(url):
                    await query.edit_message_text(BOT_MESSAGES["invalid_url"])
                    return
                    
                results = self.analyzer.analyze(url, device)
                if "error" in results:
                    await query.edit_message_text(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {results['error']}")
                    return
                    
                device_name = "–º–æ–±—ñ–ª—å–Ω–∏—Ö –ø—Ä–∏—Å—Ç—Ä–æ—ó–≤" if device == "mobile" else "–∫–æ–º–ø'—é—Ç–µ—Ä—ñ–≤"
                message = f"üìä *–î–µ—Ç–∞–ª—å–Ω–∏–π –∞–Ω–∞–ª—ñ–∑ –¥–ª—è {device_name}*\nURL: {url}\n\n"
                message += f"*–ó–∞–≥–∞–ª—å–Ω–∞ –æ—Ü—ñ–Ω–∫–∞:* {results.get('score', 'N/A')}/100\n\n"
                message += "*–û—Å–Ω–æ–≤–Ω—ñ –º–µ—Ç—Ä–∏–∫–∏:*\n"
                for metric_name, metric_data in results.get('metrics', {}).items():
                    emoji = "‚úÖ" if metric_data.get('rating') == "good" else "‚ö†Ô∏è" if metric_data.get('rating') == "average" else "‚ùå"
                    message += f"{emoji} {metric_name}: {metric_data.get('value', 'N/A')} ({metric_data.get('rating', 'N/A')})\n"
                if results.get('recommendations'):
                    message += "\n*–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó —â–æ–¥–æ –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—ó:*\n"
                    for rec in results['recommendations']:
                        message += f"‚Ä¢ {rec}\n"
                await query.edit_message_text(message, parse_mode="Markdown")

            except Exception as e:
                logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª—ñ–∑—É: {e}", exc_info=True)
                await query.edit_message_text(
                    BOT_MESSAGES["error"].format(error=str(e))
                )
        
        elif action_prefix == "cancel" and action_parts[1] == "job":
            if len(action_parts) < 3:
                 await query.edit_message_text("‚ùå –ü–æ–º–∏–ª–∫–∞: –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç ID –∑–∞–≤–¥–∞–Ω–Ω—è –¥–ª—è —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è.")
                 return
            
            job_id_to_cancel = action_parts[2]
            chat_id = update.effective_chat.id

            if job_id_to_cancel in self.scheduled_jobs and self.scheduled_jobs[job_id_to_cancel]['chat_id'] == chat_id:
                try:
                    self.scheduler.remove_job(job_id_to_cancel)
                    job_details = self.scheduled_jobs.pop(job_id_to_cancel)
                    logger.info(f"Removed scheduled job {job_id_to_cancel} for chat {chat_id}")
                    await query.edit_message_text(BOT_MESSAGES["schedule_cancel_success"].format(url=job_details['url']))
                except Exception as e:
                    logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–¥–∞–ª–µ–Ω–Ω—ñ –∑–∞–≤–¥–∞–Ω–Ω—è {job_id_to_cancel}: {e}", exc_info=True)
                    if job_id_to_cancel in self.scheduled_jobs:
                         await query.edit_message_text(BOT_MESSAGES["schedule_cancel_error"].format(error=str(e)))
                    else:
                         await query.edit_message_text("‚ÑπÔ∏è –¶–µ –∑–∞–≤–¥–∞–Ω–Ω—è –≤–∂–µ –±—É–ª–æ –≤–∏–¥–∞–ª–µ–Ω–æ.")

            else:
                logger.warning(f"Attempt to cancel non-existent or unauthorized job {job_id_to_cancel} by chat {chat_id}")
                await query.edit_message_text("‚ùå –ü–æ–º–∏–ª–∫–∞: –ó–∞–≤–¥–∞–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∞–±–æ —É –≤–∞—Å –Ω–µ–º–∞—î –ø—Ä–∞–≤ –Ω–∞ –π–æ–≥–æ —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è.")

        else:
            logger.warning(f"Received unknown button callback prefix: {action_prefix} with data: {callback_data}")
            pass

    async def error_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–æ–±–Ω–∏–∫ –ø–æ–º–∏–ª–æ–∫."""
        logger.error(f"–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è: {context.error}", exc_info=True)
        
        if update and update.effective_message:
            await update.effective_message.reply_text(
                "‚ùå –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –≤–∞—à–æ–≥–æ –∑–∞–ø–∏—Ç—É. "
                "–ë—É–¥—å –ª–∞—Å–∫–∞, —Å–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ –ø—ñ–∑–Ω—ñ—à–µ."
            )