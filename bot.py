#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
–û—Å–Ω–æ–≤–Ω–∏–π –º–æ–¥—É–ª—å Telegram –±–æ—Ç–∞ –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É URL –∑ Google PageSpeed Insights
"""

import logging
from datetime import datetime

from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import (
    Application, CommandHandler, MessageHandler, CallbackQueryHandler,
    filters, ContextTypes
)

from config import TOKEN, BOT_MESSAGES, logger
from pagespeed_analyzer import PageSpeedAnalyzer
from pdf_generator import PDFReportGenerator
from utils import is_valid_url, generate_filename


class PageSpeedBot:
    """
    –ö–ª–∞—Å –¥–ª—è –æ–±—Ä–æ–±–∫–∏ –≤–∑–∞—î–º–æ–¥—ñ–π –∑ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º —á–µ—Ä–µ–∑ Telegram.
    """
    
    def __init__(self, token=None):
        """
        –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î Telegram –±–æ—Ç–∞.
        
        Args:
            token (str, optional): Telegram Bot API —Ç–æ–∫–µ–Ω.
                                  –ó–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è –∑ config.py
        """
        self.token = token or TOKEN
        self.analyzer = PageSpeedAnalyzer()
        self.pdf_generator = PDFReportGenerator()
    
    def run(self):
        """–ó–∞–ø—É—Å–∫–∞—î –±–æ—Ç–∞."""
        # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –¥–æ–¥–∞—Ç–∫—É
        application = Application.builder().token(self.token).build()

        # –î–æ–¥–∞–≤–∞–Ω–Ω—è –æ–±—Ä–æ–±–Ω–∏–∫—ñ–≤ –∫–æ–º–∞–Ω–¥
        application.add_handler(CommandHandler("start", self.start))
        application.add_handler(CommandHandler("help", self.help_command))
        application.add_handler(CommandHandler("about", self.about_command))
        
        # –î–æ–¥–∞–≤–∞–Ω–Ω—è –æ–±—Ä–æ–±–Ω–∏–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
        application.add_handler(
            MessageHandler(filters.TEXT & ~filters.COMMAND, self.analyze_url)
        )
        
        # –î–æ–¥–∞–≤–∞–Ω–Ω—è –æ–±—Ä–æ–±–Ω–∏–∫–∞ –∫–Ω–æ–ø–æ–∫
        application.add_handler(CallbackQueryHandler(self.button_callback))
        
        # –î–æ–¥–∞–≤–∞–Ω–Ω—è –æ–±—Ä–æ–±–Ω–∏–∫–∞ –ø–æ–º–∏–ª–æ–∫
        application.add_error_handler(self.error_handler)

        # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
        logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ")
        application.run_polling()
    
    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /start."""
        user = update.effective_user
        message = BOT_MESSAGES["start"].format(user_name=user.first_name)
        await update.message.reply_text(message)
    
    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /help."""
        await update.message.reply_text(BOT_MESSAGES["help"], parse_mode="Markdown")
    
    async def about_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /about."""
        await update.message.reply_text(BOT_MESSAGES["about"], parse_mode="Markdown")
    
    async def analyze_url(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–æ–±–Ω–∏–∫ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –∑ URL."""
        url = update.message.text.strip()
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—ñ URL
        if not is_valid_url(url):
            await update.message.reply_text(BOT_MESSAGES["invalid_url"])
            return
        
        # –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø–æ—á–∞—Ç–æ–∫ –∞–Ω–∞–ª—ñ–∑—É
        status_message = await update.message.reply_text(BOT_MESSAGES["analysis_start"])
        
        try:
            # –ê–Ω–∞–ª—ñ–∑ –¥–ª—è –º–æ–±—ñ–ª—å–Ω–æ—ó –≤–µ—Ä—Å—ñ—ó
            mobile_results = self.analyzer.analyze(url, "mobile")
            if "error" in mobile_results:
                await status_message.edit_text(
                    BOT_MESSAGES["error"].format(error=mobile_results["error"])
                )
                return
                
            # –ê–Ω–∞–ª—ñ–∑ –¥–ª—è –¥–µ—Å–∫—Ç–æ–ø–Ω–æ—ó –≤–µ—Ä—Å—ñ—ó
            desktop_results = self.analyzer.analyze(url, "desktop")
            if "error" in desktop_results:
                await status_message.edit_text(
                    BOT_MESSAGES["error"].format(error=desktop_results["error"])
                )
                return
                
            # –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É
            await status_message.edit_text(BOT_MESSAGES["analysis_complete"])
            
            # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è PDF –∑—ñ –∑–≤—ñ—Ç–æ–º
            pdf_bytes = self.pdf_generator.generate_report(url, mobile_results, desktop_results)
            pdf_bytes.seek(0)
            
            # –ü—ñ–¥–≥–æ—Ç–æ–≤–∫–∞ –Ω–∞–∑–≤–∏ —Ñ–∞–π–ª—É
            filename = generate_filename(url)
            
            # –í—ñ–¥–ø—Ä–∞–≤–∫–∞ PDF —Ñ–∞–π–ª—É
            await update.message.reply_document(
                document=pdf_bytes,
                filename=filename,
                caption=BOT_MESSAGES["report_caption"].format(
                    url=url,
                    mobile_score=mobile_results['score'],
                    desktop_score=desktop_results['score']
                )
            )
            
            # –í–∏–¥–∞–ª–µ–Ω–Ω—è —Å—Ç–∞—Ç—É—Å–Ω–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
            await status_message.delete()
            
            # –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –∫–Ω–æ–ø–æ–∫ –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª—ñ–∑—É
            keyboard = [
                [
                    InlineKeyboardButton("üì± –î–µ—Ç–∞–ª—å–Ω–∏–π –∞–Ω–∞–ª—ñ–∑ –¥–ª—è –º–æ–±—ñ–ª—å–Ω–∏—Ö", 
                                        callback_data=f"detail_mobile_{url}"),
                    InlineKeyboardButton("üñ•Ô∏è –î–µ—Ç–∞–ª—å–Ω–∏–π –∞–Ω–∞–ª—ñ–∑ –¥–ª—è –¥–µ—Å–∫—Ç–æ–ø—É", 
                                        callback_data=f"detail_desktop_{url}")
                ]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await update.message.reply_text(
                BOT_MESSAGES["detail_options"],
                reply_markup=reply_markup
            )
            
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª—ñ–∑—ñ URL: {e}", exc_info=True)
            await status_message.edit_text(
                BOT_MESSAGES["error"].format(error=str(e))
            )
    
    async def button_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–æ–±–Ω–∏–∫ –Ω–∞—Ç–∏—Å–∫–∞–Ω—å –Ω–∞ –∫–Ω–æ–ø–∫–∏."""
        query = update.callback_query
        await query.answer()
        
        # –†–æ–∑–±—ñ—Ä –¥–∞–Ω–∏—Ö –∑ –∫–Ω–æ–ø–∫–∏
        data = query.data.split("_")
        if len(data) < 3:
            await query.edit_message_text("‚ùå –ü–æ–º–∏–ª–∫–∞: –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–∏—Ö –∫–Ω–æ–ø–∫–∏")
            return
            
        action = data[0]
        device = data[1]
        url = "_".join(data[2:])  # –ù–∞ –≤–∏–ø–∞–¥–æ–∫, —è–∫—â–æ –≤ URL —î —Å–∏–º–≤–æ–ª "_"
        
        if action == "detail":
            await query.edit_message_text(f"üîç –û—Ç—Ä–∏–º—É—é –¥–µ—Ç–∞–ª—å–Ω–∏–π –∞–Ω–∞–ª—ñ–∑ –¥–ª—è {device}...")
            
            try:
                results = self.analyzer.analyze(url, device)
                if "error" in results:
                    await query.edit_message_text(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {results['error']}")
                    return
                    
                # –§–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∑–≤—ñ—Ç—É
                device_name = "–º–æ–±—ñ–ª—å–Ω–∏—Ö –ø—Ä–∏—Å—Ç—Ä–æ—ó–≤" if device == "mobile" else "–∫–æ–º–ø'—é—Ç–µ—Ä—ñ–≤"
                message = f"üìä *–î–µ—Ç–∞–ª—å–Ω–∏–π –∞–Ω–∞–ª—ñ–∑ –¥–ª—è {device_name}*\nURL: {url}\n\n"
                
                # –û—Å–Ω–æ–≤–Ω–∞ –æ—Ü—ñ–Ω–∫–∞
                message += f"*–ó–∞–≥–∞–ª—å–Ω–∞ –æ—Ü—ñ–Ω–∫–∞:* {results['score']}/100\n\n"
                
                # –û—Å–Ω–æ–≤–Ω—ñ –º–µ—Ç—Ä–∏–∫–∏
                message += "*–û—Å–Ω–æ–≤–Ω—ñ –º–µ—Ç—Ä–∏–∫–∏:*\n"
                for metric_name, metric_data in results['metrics'].items():
                    emoji = "‚úÖ" if metric_data['rating'] == "good" else "‚ö†Ô∏è" if metric_data['rating'] == "average" else "‚ùå"
                    message += f"{emoji} {metric_name}: {metric_data['value']} ({metric_data['rating']})\n"
                
                # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó
                if results['recommendations']:
                    message += "\n*–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó —â–æ–¥–æ –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—ó:*\n"
                    for rec in results['recommendations']:
                        message += f"‚Ä¢ {rec}\n"
                
                await query.edit_message_text(message, parse_mode="Markdown")
                
            except Exception as e:
                logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª—ñ–∑—É: {e}", exc_info=True)
                await query.edit_message_text(
                    BOT_MESSAGES["error"].format(error=str(e))
                )
    
    async def error_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–æ–±–Ω–∏–∫ –ø–æ–º–∏–ª–æ–∫."""
        logger.error(f"–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è: {context.error}", exc_info=True)
        
        # –°–ø—Ä–æ–±–∞ –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É –ø—Ä–æ –ø–æ–º–∏–ª–∫—É
        if update and update.effective_message:
            await update.effective_message.reply_text(
                "‚ùå –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –≤–∞—à–æ–≥–æ –∑–∞–ø–∏—Ç—É. "
                "–ë—É–¥—å –ª–∞—Å–∫–∞, —Å–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ –ø—ñ–∑–Ω—ñ—à–µ."
            )